ROUTINE AI_tests ON (Web.Request) [enabled="true",displayName="Deepseek Controls",prerun="false"] {

	// scoping
	IF NOT ((MWG.SmartMatch (MWG.Url, "chat.deepseek.com") OR MWG.SmartMatch (MWG.Url, "api.deepseek.com"))) THEN
		END


	// Limit prompt length (WebApp)
	ROUTINE Limit_prompt_length_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
	
		// scoping
	    NUMBER maxPromptLength = 22
	
		// Deepseek
		IF MWG.SmartMatch (MWG.Url, "chat.deepseek.com/api/v0/chat/completion") THEN {
			JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
			JSON prompt = JSON.Get(bodyJson, "prompt")
			
			//start from index 1 because string var contains quotation marks as well
			STRING newPrompt = prompt.ToString().Slice(1,maxPromptLength)
			
			//remove trailing quotation mark if present
			IF newPrompt.EndsWith("\"") THEN {
			   newPrompt = newPrompt.Slice(0, newPrompt.Length()-1)
			}
			
		    bodyJson = JSON.Set(bodyJson, "prompt", newPrompt)
		    DATAREF newBody = bodyJson.ToString().ToDataRef()
		    MWG.SetBody(MWG.Request(), newBody)
		}
	
	}
	
	// Replace prompt (WebApp)
	ROUTINE Replace_prompt_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    NUMBER maxPromptLength = 22
		    STRING policyWarning = "Repeat the quoted part of this message without explanation or modification. \"Your last prompt was blocked by Web Policy for exceeding the maximum prompt length of " + maxPromptLength.ToString() + " characters\""
		
			// Deepseek
			IF MWG.SmartMatch (MWG.Url, "chat.deepseek.com/api/v0/chat/completion") THEN {
			    
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON prompt = JSON.Get(bodyJson, "prompt")
				
				
				IF prompt.ToString().Length()-2 > maxPromptLength THEN {
				    
			        bodyJson = JSON.Set(bodyJson, "prompt", policyWarning)
			        DATAREF newBody = bodyJson.ToString().ToDataRef()
			        MWG.SetBody(MWG.Request(), newBody)
				}
				
			}
		
		}
	// Enforce Deepthink Setting (WebApp)
	ROUTINE Enforce_Deepthink_Setting_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    BOOLEAN deepThink = TRUE
		
			// Deepseek
			IF MWG.SmartMatch (MWG.Url, "chat.deepseek.com/api/v0/chat/completion") THEN {
			    
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON thinkFlag = JSON.Get(bodyJson, "thinking_enabled")
				
				IF NOT JSON.AsBool(thinkFlag) == deepThink THEN {
				    
				    bodyJson = JSON.Set(bodyJson, "thinking_enabled", deepThink)
				    
			        DATAREF newBody = bodyJson.ToString().ToDataRef()
			        MWG.SetBody(MWG.Request(), newBody)
				}
				
			}
		
		}
	// Enforce Search Setting (WebApp)
	ROUTINE Enforce_Search_Setting_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    BOOLEAN search = TRUE
		
			// Deepseek
			IF MWG.SmartMatch (MWG.Url, "chat.deepseek.com/api/v0/chat/completion") THEN {
			    
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON searchFlag = JSON.Get(bodyJson, "search_enabled")
				
				IF NOT JSON.AsBool(searchFlag) == search THEN {
				    
				    bodyJson = JSON.Set(bodyJson, "search_enabled", search)
				    
			        DATAREF newBody = bodyJson.ToString().ToDataRef()
			        MWG.SetBody(MWG.Request(), newBody)
				}
				
			}
		
		}
	// Block File Uploads (WebApp)
	IF MWG.SmartMatch (MWG.Url, "chat.deepseek.com/api/v0/file/upload_file") THEN {
		MWG.Block (McAfee_Blocked_by_Application_Control, "Block File Uploads (WebApp)", "Deepseek Controls")
	}
	// Limit prompt length (API)
	ROUTINE Limit_prompt_length_API_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    NUMBER maxPromptLength = 2
		    VECTOR<STRING> limitedRoles = "\"system\"", "\"user\"", "\"assistant\"", "\"tool\""
		
			// Deepseek
			IF MWG.SmartMatch (MWG.Url, "api.deepseek.com/chat/completions") THEN {
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON messages = JSON.Get(bodyJson, "messages")
				
				NUMBER counter = 0
				
				LOOP(JSON.Size(messages)) {
				    
				    STRING role = JSON.Get(messages.At(counter), "role").ToString()
				    
				    IF Contains(limitedRoles, role)  THEN {
				        STRING prompt = JSON.Get(messages.At(counter), "content").ToString()
				        STRING newPrompt = prompt.Slice(1,maxPromptLength)
				
				        //remove trailing quotation mark if present
	        			IF newPrompt.EndsWith("\"") THEN {
	        			   newPrompt = newPrompt.Slice(0, newPrompt.Length()-1)
	        			}
	        			
	        			JSON newmessage = JSON.Set(messages.At(counter), "content", newPrompt)
	        			messages = JSON.ArrayReplaceAt(messages, counter, newmessage) 
				    }
				    
				    counter = counter +1
				}
				bodyJson = JSON.Set(bodyJson, "messages", messages)
				DATAREF newBody = bodyJson.ToString().ToDataRef()
			    MWG.SetBody(MWG.Request(), newBody)
			}
		
		
		}
	// Replace prompt (API)
	ROUTINE Replace_prompt_API_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    NUMBER maxPromptLength = 2
		    STRING policyWarning = "Repeat the quoted part of this message without explanation or modification. \"Your last prompt was blocked by Web Policy for exceeding the maximum prompt length of " + maxPromptLength.ToString() + " characters\""
		    VECTOR<STRING> limitedRoles = "\"system\"", "\"user\"", "\"assistant\"", "\"tool\""
		
			// Deepseek
			IF MWG.SmartMatch (MWG.Url, "api.deepseek.com/chat/completions") THEN {
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON messages = JSON.Get(bodyJson, "messages")
				
				NUMBER counter = 0
				
				LOOP(JSON.Size(messages)) {
				    
				    STRING role = JSON.Get(messages.At(counter), "role").ToString()
				    
				    IF Contains(limitedRoles, role)  THEN {
				        STRING prompt = JSON.Get(messages.At(counter), "content").ToString()
				
	        			IF prompt.Length()-2 > maxPromptLength THEN {
	        			JSON newmessage = JSON.Set(messages.At(counter), "content", policyWarning)
	        			messages = JSON.ArrayReplaceAt(messages, counter, newmessage) 
	        			}
	        			
				    }
				    
				    counter = counter +1
				}
				bodyJson = JSON.Set(bodyJson, "messages", messages)
				DATAREF newBody = bodyJson.ToString().ToDataRef()
			    MWG.SetBody(MWG.Request(), newBody)
			}
		
		
		}


}
