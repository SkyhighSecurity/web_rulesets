// Block prompts exceeding length limit (WebApp)
	ROUTINE Block_prompts_exceeding_length_limit_WebApp_ ON (Web.Response) [enabled="true",displayName="AI tests",prerun="false"] {
	
		// scoping
	    NUMBER maxPromptLength = 22
	    STRING policyWarning = "Your prompt was blocked by Web Policy for exceeding the maximum prompt length of " + maxPromptLength.ToString() + " characters"
		
	
		RegExJSi noncePattern = ToRegExJSi("'nonce-([a-zA-Z0-9_-]*)'")
			STRING nonce = ""
		    
			IF MWG.SmartMatch (MWG.Url, "aistudio.google.com") THEN {
				STRING body = MWG.BodyData(MWG.Response()).ToString()
				MWG.HeaderMap headers = MWG.Headers(MWG.Response())
				VECTOR<STRING> cspHeaders = MWG.GetAll(MWG.Headers(MWG.Response()), "Content-Security-Policy")
				
				STRING header = ""
				FOR header IN cspHeaders DO {
				    VECTOR<STRING> matches = RegExJSi.FindAll(noncePattern, header)
				
	    			IF matches.Size > 0 THEN {
	    			    nonce = matches.Get(0)
	    			}
				}
				STRING scriptBody = "<head><script nonce='" + nonce + "'>window.addEventListener(\"load\", function(event) {const shta=document.querySelector(\"ms-autosize-textarea\"); shta.addEventListener(\"input\", (e) => {if(e.target.value.length>" + maxPromptLength.ToString + "){window.alert(\"" + policyWarning + "\"); e.target.value=\"\"}})})</script>"
				body = ReplaceFirst(body, "<head>", scriptBody)
				
				DATAREF newBody = body.ToDataRef()
			    MWG.SetBody(MWG.Response(), newBody)
			}
	
	
	}
