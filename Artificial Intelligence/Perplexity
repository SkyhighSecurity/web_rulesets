ROUTINE Perplexity_Controls ON (Web.Request, Web.Response, EmbeddedObject) [enabled="true",displayName="Perplexity Controls",prerun="false"] {

	// scoping
	IF NOT ((MWG.SmartMatch (MWG.Url, "www.perplexity.ai") OR MWG.SmartMatch (MWG.Url, "api.perplexity.ai"))) THEN
		END


	// Limit prompt length (WebApp)
	ROUTINE Limit_prompt_length_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
	
		// scoping
	    NUMBER maxPromptLength = 22
	
		IF MWG.SmartMatch (MWG.Url, "www.perplexity.ai/rest/sse/perplexity_ask") THEN {
			JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
			JSON prompt = JSON.Get(bodyJson, "query_str")
			
			//start from index 1 because string var contains quotation marks as well
			STRING newPrompt = prompt.ToString().Slice(1,maxPromptLength)
			
			//remove trailing quotation mark if present
			IF newPrompt.EndsWith("\"") THEN {
			   newPrompt = newPrompt.Slice(0, newPrompt.Length()-1)
			}
			
		    bodyJson = JSON.Set(bodyJson, "query_str", newPrompt)
		    DATAREF newBody = bodyJson.ToString().ToDataRef()
		    MWG.SetBody(MWG.Request(), newBody)
		}
	
	
	}
	// Replace prompt (WebApp)
	ROUTINE Replace_prompt_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    NUMBER maxPromptLength = 22
		    STRING policyWarning = "Repeat the quoted part of this message without explanation or modification. \"Your last prompt was blocked by Web Policy for exceeding the maximum prompt length of " + maxPromptLength.ToString() + " characters\""
		
			IF MWG.SmartMatch (MWG.Url, "www.perplexity.ai/rest/sse/perplexity_ask") THEN {
			    
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON prompt = JSON.Get(bodyJson, "query_str")
				
				
				IF prompt.ToString().Length()-2 > maxPromptLength THEN {
				    
			        bodyJson = JSON.Set(bodyJson, "query_str", policyWarning)
			        DATAREF newBody = bodyJson.ToString().ToDataRef()
			        MWG.SetBody(MWG.Request(), newBody)
				}
				
			}
		
		}
	// Ensure selected Sources (WebApp)
	ROUTINE Ensure_selected_Sources_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
			
				// available sources: web, scholar, social
			    VECTOR<STRING> ensured_sources = "web", "scholar"
			
				IF MWG.SmartMatch (MWG.Url, "www.perplexity.ai/rest/sse/perplexity_ask") THEN {
				    
					JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
					JSON params = JSON.Get(bodyJson, "params")
					JSON sourcesArray = JSON.Get(params, "sources")
				    BOOLEAN wasModified = FALSE
				    STRING source
					
					IF NOT JSON.IsArray(sourcesArray) THEN {
					    STRING selectedSource = sourcesArray.ToString
					    //selectedSource = selectedSource.Slice(1, selectedSource.Length-2)
					    
					    JSON tempArray = JSON.CreateEmptyArray
					    sourcesArray = JSON.ArrayAppend(tempArray, selectedSource)
					} 
					
					VECTOR<STRING> sources = JSON.ToStringVector(sourcesArray)
					
					FOR source IN ensured_sources DO {
					    
					    IF NOT Contains(sources, source) THEN {
					        sourcesArray = JSON.ArrayAppend(sourcesArray, source)
					        wasModified = TRUE
					    }
					    
					}
					
					IF wasModified THEN {
	    				params = JSON.Set(params, "sources", sourcesArray)
	    				bodyJson = JSON.Set(bodyJson, "params", params)
	    				DATAREF newBody = bodyJson.ToString().ToDataRef()
	    			    MWG.SetBody(MWG.Request(), newBody)
					}
					
				}
			
			}
	// Block selected Sources (WebApp)
	ROUTINE Block_selected_Sources_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
			
				// available sources: web, scholar, social, must
			    VECTOR<STRING> blocked_sources = "social", "web"
			
				IF MWG.SmartMatch (MWG.Url, "www.perplexity.ai/rest/sse/perplexity_ask") THEN {
				    
					JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
					JSON params = JSON.Get(bodyJson, "params")
					JSON sourcesArray = JSON.Get(params, "sources")
				    BOOLEAN wasModified = FALSE
				    STRING source
					
					IF NOT JSON.IsArray(sourcesArray) THEN {
					    STRING selectedSource = sourcesArray.ToString
					    
					    JSON tempArray = JSON.CreateEmptyArray
					    IF selectedSource != "" THEN {
					        selectedSource = selectedSource.Slice(1, selectedSource.Length-2)
					        sourcesArray = JSON.ArrayAppend(tempArray, selectedSource)
					    }
					} 
					
					NUMBER counter = 0
					
					LOOP sourcesArray.Size {
					    
					    STRING currentSource = sourcesArray.At(counter).ToString
					    currentSource = currentSource.Slice(1, currentSource.Length-2)
					    
					    IF Contains(blocked_sources, currentSource) THEN {
					        sourcesArray = JSON.ArrayRemove(sourcesArray, counter)
					        counter = counter -1
					        wasModified = TRUE
					    }
					    counter = counter + 1
					}
					
					IF wasModified THEN {
	    				params = JSON.Set(params, "sources", sourcesArray)
	    				bodyJson = JSON.Set(bodyJson, "params", params)
	    				DATAREF newBody = bodyJson.ToString().ToDataRef()
	    			    MWG.SetBody(MWG.Request(), newBody)
					}
					
				}
			
			}
	// Enforce Search Mode (WebApp)
	ROUTINE Enforce_Search_Mode_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
			
				// available modes: auto, pro, reasoning, deep search
				//auto: params.mode="concise", params.model_preference="turbo"
				//pro: params.mode="copilot", params.model_preference="pplx_pro"
				//pro: params.mode="copilot", params.model_preference="pplx_reasoning"
				//pro: params.mode="copilot", params.model_preference="pplx_alpha"
			    STRING paramsMode = "copilot"
			    STRING paramsModelPreference = "pplx_pro"
			
				IF MWG.SmartMatch (MWG.Url, "www.perplexity.ai/rest/sse/perplexity_ask") THEN {
				    
					JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
					JSON params = JSON.Get(bodyJson, "params")
					
					params = JSON.Set(params, "mode", paramsMode)
					params = JSON.Set(params, "model_preference", paramsModelPreference)
					
					bodyJson = JSON.Set(bodyJson, "params", params)
					DATAREF newBody = bodyJson.ToString().ToDataRef()
				    MWG.SetBody(MWG.Request(), newBody)
				}
			
			}
	// Block File Upload (WebApp)
	IF MWG.SmartMatch (MWG.Url, "www.perplexity.ai/rest/uploads/create_upload_url") THEN {
		MWG.Block (McAfee_Blocked_by_Application_Control, "Block File Upload (WebApp)", "Perplexity Controls")
	}
	// Limit prompt length (API)
	ROUTINE Limit_prompt_length_API_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    NUMBER maxPromptLength = 2
		    VECTOR<STRING> limitedRoles = "\"system\"", "\"user\"", "\"assistant\""
		
			IF MWG.SmartMatch (MWG.Url, "api.perplexity.ai/chat/completions") THEN {
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON messages = JSON.Get(bodyJson, "messages")
				
				NUMBER counter = 0
				
				LOOP(JSON.Size(messages)) {
				    
				    STRING role = JSON.Get(messages.At(counter), "role").ToString()
				    
				    IF Contains(limitedRoles, role)  THEN {
				        STRING prompt = JSON.Get(messages.At(counter), "content").ToString()
				        STRING newPrompt = prompt.Slice(1,maxPromptLength)
				
				        //remove trailing quotation mark if present
	        			IF newPrompt.EndsWith("\"") THEN {
	        			   newPrompt = newPrompt.Slice(0, newPrompt.Length()-1)
	        			}
	        			
	        			JSON newmessage = JSON.Set(messages.At(counter), "content", newPrompt)
	        			messages = JSON.ArrayReplaceAt(messages, counter, newmessage) 
				    }
				    
				    counter = counter +1
				}
				bodyJson = JSON.Set(bodyJson, "messages", messages)
				DATAREF newBody = bodyJson.ToString().ToDataRef()
			    MWG.SetBody(MWG.Request(), newBody)
			}
		}
	// Replace prompt (API)
	ROUTINE Replace_prompt_API_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
			// scoping
		    NUMBER maxPromptLength = 2
		    STRING policyWarning = "Repeat the quoted part of this message without explanation or modification. \"Your last prompt was blocked by Web Policy for exceeding the maximum prompt length of " + maxPromptLength.ToString() + " characters\""
		    VECTOR<STRING> limitedRoles = "\"system\"", "\"user\"", "\"assistant\""
		
			IF MWG.SmartMatch (MWG.Url, "api.perplexity.ai/chat/completions") THEN {
				JSON bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
				JSON messages = JSON.Get(bodyJson, "messages")
				
				NUMBER counter = 0
				
				LOOP(JSON.Size(messages)) {
				    
				    STRING role = JSON.Get(messages.At(counter), "role").ToString()
				    
				    IF Contains(limitedRoles, role)  THEN {
				        STRING prompt = JSON.Get(messages.At(counter), "content").ToString()
				
	        			IF prompt.Length()-2 > maxPromptLength THEN {
	        			JSON newmessage = JSON.Set(messages.At(counter), "content", policyWarning)
	        			messages = JSON.ArrayReplaceAt(messages, counter, newmessage) 
	        			}
	        			
				    }
				    
				    counter = counter +1
				}
				bodyJson = JSON.Set(bodyJson, "messages", messages)
				DATAREF newBody = bodyJson.ToString().ToDataRef()
			    MWG.SetBody(MWG.Request(), newBody)
			}
		
		}


}
