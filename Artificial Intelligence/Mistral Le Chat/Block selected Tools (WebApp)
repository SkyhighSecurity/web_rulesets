ROUTINE Block_selected_Tools_WebApp_ ON (Web.Request) [enabled="true",displayName="AI tests",prerun="false"] {
		
		    // scoping
		    NUMBER maxPromptLength = 22
			// available tools: beta-imagegen, beta-websearch, beta-code-interpreter, beta-trampoline (canvas)
		    VECTOR<STRING> blocked_tools = "beta-imagegen"
	        JSON bodyJson
	        JSON toolsArray
	        DATAREF newBody
	        JSON firstLevel
	        JSON secondLevel
		    STRING selectedTool
		    JSON tempArray
		    VECTOR<STRING> tools
		    STRING tool
		    BOOLEAN wasModified = FALSE
		    NUMBER counter = 0
	    
	        //initial chat request
	    	IF MWG.SmartMatch (MWG.Url, "chat.mistral.ai/api/trpc/message.newChat") THEN {
	    		bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
	    		
	    		IF JSON.HasMember(bodyJson, "0") THEN {
	    		    firstLevel = JSON.Get(bodyJson, "0")
    	    		secondLevel = JSON.Get(firstLevel, "json")
    	    		toolsArray = JSON.Get(secondLevel, "features")
    	    		
    	    		IF NOT JSON.IsArray(toolsArray) THEN {
    				    selectedTool = JSON.AsString(toolsArray)
    				    
    				    tempArray = JSON.CreateEmptyArray
    				    IF selectedTool != "" THEN
    				    toolsArray = JSON.ArrayAppend(tempArray, selectedTool)
    				} 
    				
    				tools = JSON.ToStringVector(toolsArray)
    				
    				FOR tool IN blocked_tools DO {
    				    
    				    IF Contains(tools, tool) THEN {
    				        toolsArray = JSON.ArrayRemove(toolsArray, counter)
    				        counter = counter -1
    				        wasModified = TRUE
    				    }
    				    counter = counter +1
    				    
    				}
    				
    				IF wasModified THEN {
    				    secondLevel = JSON.Set(secondLevel, "features", toolsArray)
                	    firstLevel = JSON.Set(firstLevel, "json", secondLevel)
                	    bodyJson = JSON.Set(bodyJson, "0", firstLevel)
        				newBody = bodyJson.ToString().ToDataRef()
        			    MWG.SetBody(MWG.Request(), newBody)
        			    MWG.Add(MWG.Headers(MWG.Request), "test", newBody.ToString)
    				}
	    		}
	    	    
	    	}
	    	
	    	
	        //subsequent request
	    	IF MWG.SmartMatch (MWG.Url, "chat.mistral.ai/api/chat") THEN {
	    		bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
	    		
	    		IF JSON.HasMember(bodyJson, "features") THEN {
	    		    toolsArray = JSON.Get(bodyJson, "features")
	    		
    				IF NOT JSON.IsArray(toolsArray) THEN {
    				    selectedTool = JSON.AsString(toolsArray)
    				    
    				    tempArray = JSON.CreateEmptyArray
    				    toolsArray = JSON.ArrayAppend(tempArray, selectedTool)
    				} 
    				
    				tools = JSON.ToStringVector(toolsArray)
    				
    				FOR tool IN blocked_tools DO {
    				    
    				    IF Contains(tools, tool) THEN {
    				        toolsArray = JSON.ArrayRemove(toolsArray, counter)
				            counter = counter -1
    				        wasModified = TRUE
    				    }
    				    counter = counter +1
    				}
    				
    				IF wasModified THEN {
        				bodyJson = JSON.Set(bodyJson, "features", toolsArray)
        				newBody = bodyJson.ToString().ToDataRef()
        			    MWG.SetBody(MWG.Request(), newBody)
    				}
	    		}
	    		
	    	}
	    	
	    	//menu toggle
	    	IF MWG.SmartMatch (MWG.Url, "chat.mistral.ai/api/trpc/event.sendEventToDatalake,event.sendEventToDatalake") THEN {
	    		bodyJson = JSON.FromStringIgnoreErrors(MWG.BodyData(MWG.Request()).ToString())
	    		
	    		IF JSON.HasMember(bodyJson, "0") THEN {
	    		    firstLevel = JSON.Get(bodyJson, "0")
    	    		secondLevel = JSON.Get(firstLevel, "json")
    	    		
    	    		IF JSON.HasMember(secondLevel, "name") THEN {
    	    		    STRING action = JSON.AsString(JSON.Get(secondLevel, "name"))
    	    		    
    	    		    IF action == "feature_toggled" THEN {
    				        JSON properties = JSON.Get(secondLevel, "properties")
    				        BOOLEAN enabled = JSON.AsBool(JSON.Get(properties, "enabled"))
    				        STRING featureName = JSON.AsString(JSON.Get(properties, "feature"))
    	    		        
    	    		        FOR tool IN blocked_tools DO {
        				    
            				    IF tool == featureName THEN {
            				        IF enabled THEN {
            				            MWG.Block(McAfee_Blocked_by_Application_Control, "Block selected Tools (WebApp)", "Mistral Le Chat Controls")
            				        }
            				    }
            				    
        				    }
    	    		        
    	    		    }
    	    		    
    	    		}
	    		} 
	    		
	    	}
		
		}
